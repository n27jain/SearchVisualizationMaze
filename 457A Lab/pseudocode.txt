# 1.) Create an array of coordinates that make up the maze
blackspots = [
(0,4), 
(0,5), 
(1,4), 
(1,5), 
(2,4), 
(2,5), 
(2,6), 
(2,7), 
(2,8), 
(3,7), 
(3,8), 
(4,7),
(4,8), 
(6,3), 
(6,4), 
(6,5), 
(6,6), 
(6,7), 
(7,3), 
(7,4), 
(7,5), 
(7,6), 
(7,7), 
(10,2), 
(10,3), 
(10,4), 
(10,5), 
(10,6), 
(10,7),
(11,2), 
(11,3), 
(11,4), 
(11,5), 
(11,6), 
(11,7), 
(12,2), 
(12,3), 
(12,4), 
(12,5), 
(12,6), 
(12,7),
(18,1), 
(18,2), 
(18,3), 
(18,4), 
(18,5), 
(18,6), 
(18,7),
(18,8), 
(18,9), 
(18,10), 
(18,11),
(18,12), 
(18,13), 
(19,1), 
(19,2), 
(19,3), 
(19,4), 
(19,5), 
(19,6), 
(20,5), 
(20,6),
(21,5), 
(21,6),
(22,6),
(23,6),
(4,11),
(21,8),
(21,9),
(21,10),
(21,11),
(21,12),
(21,13),
(22,13),
(22,14),
(23,13),
(23,14),
(23,15),
(24,12),
(24,13),
(24,14),
(24,15),
(24,16),
(15,10),
(15,11),
(15,12),
(15,13),
(15,14),
(16,10),
(16,11),
(16,12),
(16,13),
(16,14),
(8,14),
(9,14),
(10,12),
(10,13),
(10,14),
(10,15),
(10,16),
(11,14),
(12,14), 
(0,17),
(1,17),
(2,17),
(3,17),
(4,17),
(5,17),
(6,17),
(8,17),
(8,18),
(9,18),
(10,18),
(8,19),
(9,19),
(10,19),
(3,20),
(4,20),
(5,20),
(8,20),
(9,20),
(10,20),
(3,21),
(4,21),
(5,21),
(8,21),
(0,22),
(1,22),
(2,22),
(3,22),
(4,22),
(8,22),
(0,23),
(1,23),
(2,23),
(3,23),
(4,23),
(5,23),
(6,23),
(7,23),
(8,23),
(9,23),
(4,24),
(5,24),
(17,24),
(18,24),
(14,22),
(15,22),
(16,22),
(17,22),
(18,22),
(19,22),
(20,22),
(14,21),
(15,21),
(16,21),
(17,21),
(18,21),
(19,21),
(20,21),
(14,20),
(15,20),
(16,20),
(17,20),
(18,20),
(19,20),
(20,20),
(14,18),
(15,18),
(16,18),
(17,18),
(18,18),
(19,18),
(20,18)
]

# 2.) Create 1 2D array for each nodes parent.
# 3.) Create a list to store all nodes that have been discovered (queue) //store the coordinate (x,x)
# 4.) Create a list that has all nodes that are  visted and poped (finished) //pop from queue and place here
# 5.) Add starting point to the queue

#BFS
# run a loop that pops the top of the queue and adds it to the finished list
# Take the coordinate of the poped element and check to see if its childern are already in the queue or in finsihed.
# if the child is not in queue and is not finsihed add child to the queue - make sure to update this nodes parent to be the currently popped element
# skip if the child is in finished
# if the child is the goal then update its parent to the current coordinate and then return true 

# in the main def check if the BFS method returned true. 
# if true then use your 2d parents array
    # starting from the goal node's parent, traverse the 2d array until the start point is discovered - add each parent in a list
    # Now starting from the end of the list print out all elements until you return the top most node in the list.
